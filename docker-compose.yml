version: '3.8'

services:
  postgres_pipeline:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: dvmdash_pipeline
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U devuser -d dvmdash_pipeline" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./infrastructure/postgres/pipeline_init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_pipeline_data:/var/lib/postgresql/data

  postgres_events:
    image: postgres:16
    ports:
      - "5433:5432"  # Note: Different host port to avoid conflicts
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: dvmdash_events
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U devuser -d dvmdash_events" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./infrastructure/postgres/events_init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_events_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  event_collector:
    build:
      context: .
      dockerfile: ./backend/event_collector/Dockerfile
    environment:
      - START_LISTENING=true
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      - RELAYS=wss://relay.damus.io,wss://relay.primal.net,wss://relay.dvmdash.live,wss://relay.f7z.xyz,wss://relayable.org
      - DAYS_LOOKBACK=7
    healthcheck:
      test: [ "CMD", "python", "-c", "import os, redis; r=redis.from_url('redis://redis:6379/0'); r.ping() if os.getenv('START_LISTENING')=='true' else exit(0)" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./backend:/app/backend
      - event_collector_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  batch_processor:
    build:
      context: .
      dockerfile: ./backend/batch_processor/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      # Pipeline DB connection
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
      - POSTGRES_DB=dvmdash_pipeline
      - POSTGRES_HOST=postgres_pipeline
      # Events DB connection
      - EVENTS_POSTGRES_USER=devuser
      - EVENTS_POSTGRES_PASSWORD=devpass
      - EVENTS_POSTGRES_DB=dvmdash_events
      - EVENTS_POSTGRES_HOST=postgres_events
    volumes:
      - ./backend:/app/backend
      - batch_processor_logs:/app/logs
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      postgres_pipeline:
        condition: service_healthy
      postgres_events:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import redis; redis.from_url(os.getenv('REDIS_URL', 'redis://redis:6379/0')).ping()" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_pipeline_data:
  postgres_events_data:
  redis_data:
  event_collector_logs:
  batch_processor_logs: